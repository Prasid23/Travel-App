<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Travel Agent Portal | Himalayan Adventures</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary-color: #00796b;
      --primary-dark: #004d40;
      --primary-light: #b2dfdb;
      --secondary-color: #ff9800;
      --accent-color: #ff5722;
      --light-gray: #f5f5f5;
      --medium-gray: #e0e0e0;
      --dark-gray: #757575;
      --text-dark: #212121;
      --text-light: #f5f5f5;
      --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
      --shadow-md: 0 4px 6px rgba(0,0,0,0.1), 0 1px 3px rgba(0,0,0,0.08);
      --shadow-lg: 0 10px 20px rgba(0,0,0,0.1), 0 6px 6px rgba(0,0,0,0.08);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      --success-color: #2e7d32;
      --warning-color: #ff8f00;
      --error-color: #c62828;
    }
    
    * { 
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--light-gray);
      color: var(--text-dark);
      line-height: 1.6;
    }
    
    header {
      background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
      color: white;
      padding: 1.5rem;
      text-align: center;
      box-shadow: var(--shadow-md);
      position: relative;
      overflow: hidden;
    }
    
    header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--secondary-color), var(--accent-color));
    }
    
    header h1 {
      font-weight: 600;
      margin-bottom: 0.5rem;
      animation: fadeInDown 0.8s ease;
    }
    
    header p {
      font-weight: 300;
      opacity: 0.9;
      animation: fadeIn 1s ease;
    }
    
    .container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
    
    .card {
      background: white;
      padding: 2rem;
      border-radius: 10px;
      margin-bottom: 1.5rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
      animation: fadeInUp 0.5s ease;
    }
    
    .card:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-3px);
    }
    
    .card h2 {
      color: var(--primary-color);
      margin-bottom: 1.5rem;
      position: relative;
      padding-bottom: 0.5rem;
    }
    
    .card h2::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 50px;
      height: 3px;
      background: var(--secondary-color);
    }
    
    .form-group {
      margin-bottom: 1.5rem;
      position: relative;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--dark-gray);
    }
    
    input, select, textarea {
      width: 100%;
      padding: 0.8rem 1rem;
      border: 1px solid var(--medium-gray);
      border-radius: 5px;
      font-family: 'Poppins', sans-serif;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px var(--primary-light);
    }
    
    .input-icon {
      position: relative;
    }
    
    .input-icon i {
      position: absolute;
      top: 50%;
      left: 1rem;
      transform: translateY(-50%);
      color: var(--dark-gray);
    }
    
    .input-icon input {
      padding-left: 3rem;
    }
    
    .btn {
      display: inline-block;
      padding: 0.8rem 1.5rem;
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 5px;
      font-family: 'Poppins', sans-serif;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      text-decoration: none;
      transition: var(--transition);
      box-shadow: var(--shadow-sm);
    }
    
    .btn:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: var(--shadow-md);
    }
    
    .btn:active {
      transform: translateY(0);
    }
    
    .btn-secondary {
      background: var(--secondary-color);
    }
    
    .btn-secondary:hover {
      background: #e68a00;
    }
    
    .btn-accent {
      background: var(--accent-color);
    }
    
    .btn-accent:hover {
      background: #e64a19;
    }
    
    .btn-outline {
      background: transparent;
      border: 2px solid var(--primary-color);
      color: var(--primary-color);
    }
    
    .btn-outline:hover {
      background: var(--primary-color);
      color: white;
    }
    
    .btn-group {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
    }
    
    .btn-group .btn {
      flex: 1;
    }
    
    .link {
      text-align: center;
      margin-top: 1.5rem;
      color: var(--dark-gray);
    }
    
    .link a {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .link a:hover {
      color: var(--primary-dark);
      text-decoration: underline;
    }
    
    .hidden {
      display: none;
    }
    
    .error-message {
      color: var(--danger-color);
      font-size: 0.9rem;
      margin-top: 0.5rem;
    }
    
    /* Edit booking form styles */
    #editBookingForm {
      background-color: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-top: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    #editBookingForm h3 {
      margin-top: 0;
      color: #333;
      border-bottom: 1px solid #ddd;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    
    .success-message {
      background-color: #d4edda;
      color: #155724;
      padding: 10px;
      border-radius: 4px;
      margin-top: 10px;
    }
    
    .message {
      color: #666;
      margin-top: 10px;
      margin-top: 0.5rem;
    }
    
    .booking-card {
      background: white;
      border-left: 4px solid var(--secondary-color);
      padding: 1.5rem;
      margin-bottom: 1rem;
      border-radius: 5px;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
    }
    
    .booking-card:hover {
      transform: translateX(5px);
      box-shadow: var(--shadow-md);
      cursor: pointer;
    }
    
    .booking-card h3, .booking-card h4 {
      color: var(--primary-dark);
      margin-bottom: 0.5rem;
    }
    
    .booking-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }
    
    .agent-info {
      margin-bottom: 2rem;
      padding-bottom: 1.5rem;
      border-bottom: 1px solid var(--medium-gray);
    }
    
    .agent-profile {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .agent-profile i {
      color: var(--primary-color);
    }
    
    .agent-profile h3 {
      margin: 0;
      color: var(--primary-dark);
    }
    
    .agent-profile p {
      margin: 0;
      color: var(--dark-gray);
    }
    
    .stats-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .stat-card {
      background: var(--light-gray);
      padding: 1rem;
      border-radius: 8px;
      display: flex;
      align-items: center;
      gap: 1rem;
      box-shadow: var(--shadow-sm);
      transition: var(--transition);
    }
    
    .stat-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--shadow-md);
    }
    
    .stat-card i {
      font-size: 1.5rem;
      color: var(--primary-color);
    }
    
    .stat-card h4 {
      margin: 0;
      font-size: 0.9rem;
      color: var(--dark-gray);
    }
    
    .stat-card p {
      margin: 0.2rem 0 0 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--primary-dark);
    }
    
    .booking-details {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1rem;
      margin: 1rem 0;
    }
    
    .detail-item {
      margin-bottom: 0.5rem;
    }
    
    .detail-item strong {
      color: var(--dark-gray);
      display: block;
      font-size: 0.9rem;
    }
    
    .status-badge {
      display: inline-block;
      padding: 0.3rem 0.8rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
      margin-top: 0.5rem;
    }
    
    .status-confirmed {
      background-color: #e8f5e9;
      color: #2e7d32;
    }
    
    .status-pending {
      background-color: #fff8e1;
      color: #ff8f00;
    }
    
    .status-cancelled {
      background-color: #ffebee;
      color: #c62828;
    }
    
    .search-container {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .search-container input {
      flex: 1;
    }
    
    .notification {
      padding: 1rem;
      border-radius: 5px;
      margin-top: 1.5rem;
      background: #e3f2fd;
      border-left: 4px solid var(--primary-color);
      animation: fadeIn 0.5s ease;
    }
    
    .quick-actions, .search-section, .recent-bookings {
      margin-top: 2rem;
      padding-top: 1.5rem;
      border-top: 1px solid var(--medium-gray);
    }
    
    .quick-actions h3, .search-section h3, .recent-bookings h3 {
      color: var(--primary-dark);
      margin-bottom: 1rem;
      font-size: 1.2rem;
    }
    
    .action-buttons {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }
    
    .bookings-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .search-results-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .error-message {
      color: var(--error-color);
      font-weight: 500;
    }
    
    .success-message {
      color: var(--success-color);
      font-weight: 500;
    }
    
    .itinerary-suggestion {
      background: #f1f8e9;
      border-left: 4px solid #7cb342;
      padding: 1rem;
      margin-top: 1.5rem;
      border-radius: 5px;
    }
    
    .logo {
      font-size: 2rem;
      margin-bottom: 1rem;
      color: white;
    }
    
    .nav {
      display: flex;
      justify-content: flex-end;
      margin-bottom: 1rem;
    }
    
    .nav-item {
      margin-left: 1rem;
      color: var(--text-light);
      text-decoration: none;
      font-weight: 500;
      transition: var(--transition);
    }
    
    .nav-item:hover {
      color: var(--secondary-color);
    }
    
    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      20%, 60% { transform: translateX(-5px); }
      40%, 80% { transform: translateX(5px); }
    }
    
    /* Notification styles */
    #notification {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      max-width: 350px;
      border-radius: 5px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      overflow: hidden;
      animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    
    .notification.success {
      background-color: #d4edda;
      border-left: 4px solid #28a745;
    }
    
    .notification.error {
      background-color: #f8d7da;
      border-left: 4px solid #dc3545;
    }
    
    .notification-content {
      display: flex;
      align-items: center;
      padding: 12px 15px;
    }
    
    .notification-content i {
      margin-right: 10px;
      font-size: 18px;
    }
    
    .notification-content p {
      flex: 1;
      margin: 0;
      font-size: 14px;
    }
    
    .notification-content button {
      background: none;
      border: none;
      color: #666;
      cursor: pointer;
      padding: 0;
      margin-left: 10px;
    }
    
    .notification-content button:hover {
      color: #333;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .container {
        padding: 0 1rem;
      }
      
      .booking-details {
        grid-template-columns: 1fr;
      }
      
      .btn-group {
        flex-direction: column;
      }
      
      .search-container {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="logo">
      <i class="fas fa-mountain"></i>
    </div>
    <h1>Travel Agent Portal</h1>
    <p>Easy Trip - Expert Travel Management</p>
    <div class="nav">
      <a href="#" class="nav-item" id="navLogin" onclick="showLogin()"><i class="fas fa-sign-in-alt"></i> Login</a>
      <a href="#" class="nav-item" id="navSignup" onclick="showSignup()"><i class="fas fa-user-plus"></i> Signup</a>
      <a href="#" class="nav-item hidden" id="navDashboard" onclick="showDashboard()"><i class="fas fa-tachometer-alt"></i> Dashboard</a>
      <a href="#" class="nav-item hidden" id="navLogout" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>
  </header>

  <div class="container">
    <!-- Login Section -->
    <div class="card" id="loginSection">
      <h2><i class="fas fa-sign-in-alt"></i> Agent Login</h2>
      <div class="form-group input-icon">
        <i class="fas fa-user"></i>
        <input type="text" placeholder="Email or Username" id="loginUser" required />
      </div>
      <div class="form-group input-icon">
        <i class="fas fa-lock"></i>
        <input type="password" placeholder="Password" id="loginPass" required />
      </div>
      <button class="btn" onclick="login()">Login <i class="fas fa-arrow-right"></i></button>
      <div class="link">
        <p>Don't have an account? <a href="#" onclick="showSignup()">Signup here</a></p>
      </div>
      <p id="loginError" class="error-message"></p>
    </div>

    <!-- Signup Section -->
    <div class="card hidden" id="signupSection">
      <h2><i class="fas fa-user-plus"></i> Create Agent Account</h2>
      <div class="form-group">
        <label for="fullName">Full Name</label>
        <input type="text" id="fullName" placeholder="Enter your full name" />
      </div>
      <div class="form-group">
        <label for="email">Email Address</label>
        <input type="email" id="email" placeholder="Enter your email" />
      </div>
      <div class="form-group">
        <label for="phone">Phone Number</label>
        <input type="tel" id="phone" placeholder="Enter your phone number" />
      </div>
      <div class="form-group">
        <label for="agencyName">Agency Name</label>
        <input type="text" id="agencyName" placeholder="Enter your agency name" />
      </div>
      <div class="form-group">
        <label for="agencyId">Agency ID</label>
        <input type="text" id="agencyId" placeholder="Enter your agency ID" />
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" placeholder="Create a password" />
      </div>
      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <input type="password" id="confirmPassword" placeholder="Confirm your password" />
      </div>
      <button class="btn" onclick="signup()">Create Account <i class="fas fa-user-plus"></i></button>
      <div class="link">
        <p>Already have an account? <a href="#" onclick="showLogin()">Login here</a></p>
      </div>
      <p id="signupError" class="error-message"></p>
    </div>

    <!-- Dashboard Section -->
    <div class="card hidden" id="dashboard">
      <h2><i class="fas fa-tachometer-alt"></i> Dashboard</h2>
      
      <!-- Agent Info Summary -->
      <div class="agent-info">
        <div class="agent-profile">
          <i class="fas fa-user-circle fa-3x"></i>
          <div>
            <h3 id="agentName">Loading...</h3>
            <p id="agentAgency">Loading...</p>
          </div>
        </div>
        <div class="stats-container">
          <div class="stat-card">
            <i class="fas fa-calendar-check"></i>
            <div>
              <h4>Active Bookings</h4>
              <p id="activeBookingsCount">0</p>
            </div>
          </div>
          <div class="stat-card">
            <i class="fas fa-users"></i>
            <div>
              <h4>Total Clients</h4>
              <p id="totalClientsCount">0</p>
            </div>
          </div>
          <div class="stat-card">
            <i class="fas fa-chart-line"></i>
            <div>
              <h4>Revenue (Last 30 Days)</h4>
              <p id="revenueCount">₹0</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Quick Actions -->
      <div class="quick-actions">
        <h3><i class="fas fa-bolt"></i> Quick Actions</h3>
        <div class="action-buttons">
          <button class="btn btn-secondary" onclick="showNewBookingForm()"><i class="fas fa-plus-circle"></i> New Booking</button>
          <button class="btn btn-outline" onclick="showClientList()"><i class="fas fa-users"></i> View Clients</button>
          <button class="btn btn-accent" onclick="showReports()"><i class="fas fa-chart-bar"></i> Reports</button>
        </div>
      </div>
      
      <!-- Search Section -->
      <div class="search-section">
        <h3><i class="fas fa-search"></i> Find Bookings</h3>
        <div class="search-container">
          <input type="text" placeholder="Search by Name, ID or Email" id="searchInput" />
          <button class="btn" onclick="searchBooking()"><i class="fas fa-search"></i> Search</button>
        </div>
        <div id="searchResults"></div>
      </div>
      
      <!-- Recent Bookings -->
      <div class="recent-bookings">
        <h3><i class="fas fa-history"></i> Recent Bookings</h3>
        <div id="recentBookingsList" class="bookings-list">
          <p><i class="fas fa-spinner fa-spin"></i> Loading recent bookings...</p>
        </div>
      </div>
    </div>

    <!-- Booking Details -->
    <div class="card hidden" id="bookingDetails">
      <h2><i class="fas fa-calendar-alt"></i> Booking Details</h2>
      <div class="booking-card">
        <h3>Smita Dhungel</h3>
        <div class="booking-details">
          <div class="detail-item">
            <strong>Email</strong>
            <p>smita@gmail.com</p>
          </div>
          <div class="detail-item">
            <strong>Booking ID</strong>
            <p>TRAV12345</p>
          </div>
          <div class="detail-item">
            <strong>Service</strong>
            <p>Everest Base Camp Trek</p>
          </div>
          <div class="detail-item">
            <strong>Dates</strong>
            <p>May 5 - May 15, 2023</p>
          </div>
        </div>
        <span class="status-badge status-confirmed"><i class="fas fa-check-circle"></i> Confirmed</span>
      </div>
      <div class="btn-group">
        <button class="btn btn-secondary" onclick="editBooking()"><i class="fas fa-edit"></i> Edit Booking</button>
        <button class="btn" onclick="showSupportTraveler()"><i class="fas fa-headset"></i> Assist Traveler</button>
      </div>
      
      <!-- Edit Booking Form (Hidden by default) -->
      <div id="editBookingForm" class="hidden">
        <h3><i class="fas fa-edit"></i> Edit Booking</h3>
        <div class="form-group">
          <label for="editClientName">Client Name</label>
          <input type="text" id="editClientName" class="form-control" />
        </div>
        <div class="form-group">
          <label for="editEmail">Email</label>
          <input type="email" id="editEmail" class="form-control" />
        </div>
        <div class="form-group">
          <label for="editCheckInDate">Check-in Date</label>
          <input type="date" id="editCheckInDate" class="form-control" />
        </div>
        <div class="form-group">
          <label for="editCheckOutDate">Check-out Date</label>
          <input type="date" id="editCheckOutDate" class="form-control" />
        </div>
        <div class="form-group">
          <label for="editStatus">Status</label>
          <select id="editStatus" class="form-control">
            <option value="confirmed">Confirmed</option>
            <option value="pending">Pending</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
        <input type="hidden" id="editBookingId" />
        <div class="btn-group">
          <button class="btn btn-primary" onclick="saveBookingChanges()"><i class="fas fa-save"></i> Save Changes</button>
          <button class="btn btn-outline" onclick="cancelEdit()"><i class="fas fa-times"></i> Cancel</button>
        </div>
        <p id="editMessage" class="message"></p>
      </div>
    </div>

    <!-- Assist Traveler -->
    <div class="card hidden" id="assistTraveler">
      <h2><i class="fas fa-headset"></i> Traveler Assistance</h2>
      <p>Would the traveler like to modify their booking?</p>
      <div class="btn-group">
        <button class="btn btn-secondary" onclick="showModifyModule()"><i class="fas fa-edit"></i> Yes</button>
        <button class="btn" onclick="showSupportTraveler()"><i class="fas fa-arrow-right"></i> No</button>
      </div>
    </div>

    <!-- Modify Booking Module -->
    <div class="card hidden" id="modifyModule">
      <h2><i class="fas fa-edit"></i> Modify Booking</h2>
      <div class="form-group">
        <label for="newDates">New Booking Dates</label>
        <input type="text" placeholder="Enter new dates" id="newDates" />
      </div>
      <div class="form-group">
        <label for="newService">Select New Service</label>
        <select id="newService">
          <option>Everest Base Camp Trek</option>
          <option>Annapurna Circuit</option>
          <option>Pokhara City Tour</option>
          <option>Chitwan Safari</option>
          <option>Langtang Valley Trek</option>
        </select>
      </div>
      <button class="btn" onclick="saveChanges()"><i class="fas fa-save"></i> Save Changes</button>
      <div id="notification" class="notification hidden"></div>
    </div>

    <!-- Support Traveler -->
    <div class="card hidden" id="supportTraveler">
      <h2><i class="fas fa-concierge-bell"></i> Traveler Support</h2>
      <p>Would the traveler like itinerary suggestions?</p>
      <div class="btn-group">
        <button class="btn btn-secondary" onclick="showItineraryModule()"><i class="fas fa-map-marked-alt"></i> Yes</button>
        <button class="btn btn-accent" onclick="endSession()"><i class="fas fa-times"></i> No, End Session</button>
      </div>
    </div>

    <!-- Itinerary Suggestions -->
    <div class="card hidden" id="itineraryModule">
      <h2><i class="fas fa-map-marked-alt"></i> Itinerary Suggestions</h2>
      <div class="form-group">
        <label for="preference">Traveler Preferences</label>
        <input type="text" placeholder="e.g. Mountains, Lakes, Cultural Experiences" id="preference" />
      </div>
      <button class="btn btn-secondary" onclick="suggestItinerary()"><i class="fas fa-lightbulb"></i> Get Recommendations</button>
      <div id="itineraryResult"></div>
    </div>
  </div>

  <script>
    // PHP API URLs
    const apiUrls = {
      dashboardData: "../php/dashboard_data_fixed.php",
      loginUrl: "../php/login_api.php"
    };
    
    // Show notification function
    function showNotification(type, message) {
      const notificationDiv = document.getElementById('notification') || document.createElement('div');
      notificationDiv.id = 'notification';
      notificationDiv.className = `notification ${type}`;
      notificationDiv.innerHTML = `
        <div class="notification-content">
          <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
          <p>${message}</p>
          <button onclick="this.parentElement.parentElement.remove()"><i class="fas fa-times"></i></button>
        </div>
      `;
      
      // Add to body if not already present
      if (!document.getElementById('notification')) {
        document.body.appendChild(notificationDiv);
      }
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        if (notificationDiv.parentElement) {
          notificationDiv.remove();
        }
      }, 5000);
    }
    
    // Navigation functions
    function showSignup() {
      document.getElementById('loginSection').classList.add('hidden');
      document.getElementById('signupSection').classList.remove('hidden');
      document.getElementById('navLogin').classList.remove('active');
      document.getElementById('navSignup').classList.add('active');
    }
    
    function showLogin() {
      document.getElementById('signupSection').classList.add('hidden');
      document.getElementById('loginSection').classList.remove('hidden');
      document.getElementById('navSignup').classList.remove('active');
      document.getElementById('navLogin').classList.add('active');
    }
    
    function showDashboard() {
      hideAllSections();
      document.getElementById('dashboard').classList.remove('hidden');
    }
    
    function hideAllSections() {
      const sections = document.querySelectorAll('.card');
      sections.forEach(section => {
        section.classList.add('hidden');
      });
    }
    
    function logout() {
      // Clear authentication data
      localStorage.removeItem('authToken');
      localStorage.removeItem('userData');
      
      // Reset UI
      hideAllSections();
      document.getElementById('loginSection').classList.remove('hidden');
      document.getElementById('navDashboard').classList.add('hidden');
      document.getElementById('navLogout').classList.add('hidden');
      document.getElementById('navLogin').classList.remove('hidden');
      document.getElementById('navSignup').classList.remove('hidden');
      
      // Clear any search results or form inputs
      document.getElementById('loginUser').value = '';
      document.getElementById('loginPass').value = '';
      document.getElementById('loginError').innerText = '';
    }
    
    // Login functionality
    window.login = function() {
      const user = document.getElementById("loginUser").value;
      const pass = document.getElementById("loginPass").value;
      const errorElement = document.getElementById("loginError");
      
      if (!user || !pass) {
        errorElement.innerText = "Please enter both username and password.";
        return;
      }
      
      // Show loading state
      errorElement.innerText = "Authenticating...";
      const loginBtn = document.querySelector("#loginSection .btn");
      const originalBtnText = loginBtn.innerHTML;
      loginBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Authenticating...';
      loginBtn.disabled = true;
      
      // For demo purposes, use direct login without API call
      if (user.includes('demo') || user === 'agent@example.com') {
        setTimeout(() => {
          const mockAgent = {
            id: 999,
            fullName: 'Demo Agent',
            email: user,
            agencyName: 'Demo Travel Agency',
            agencyId: 'DEMO123'
          };
          
          // Store mock user data
          localStorage.setItem('userData', JSON.stringify(mockAgent));
          localStorage.setItem('authToken', 'agent-token-999');
          
          // Show dashboard
          hideAllSections();
          document.getElementById("dashboard").classList.remove("hidden");
          document.getElementById("navDashboard").classList.remove("hidden");
          document.getElementById("navLogout").classList.remove("hidden");
          document.getElementById("navLogin").classList.add("hidden");
          document.getElementById("navSignup").classList.add("hidden");
          errorElement.innerText = "";
          
          // Load dashboard data
          loadDashboardData();
          
          // Reset button state
          loginBtn.innerHTML = originalBtnText;
          loginBtn.disabled = false;
        }, 800);
        return;
      }
      
      // For regular login, use XMLHttpRequest instead of fetch for better error handling
      const xhr = new XMLHttpRequest();
      xhr.open('POST', apiUrls.loginUrl, true);
      
      xhr.onload = function() {
        try {
          // Check if response is empty
          if (!xhr.responseText || xhr.responseText.trim() === '') {
            console.log('Empty response received from server');
            throw new Error('Empty response from server');
          }
          
          if (xhr.status >= 200 && xhr.status < 300) {
            // Try to parse JSON response
            let data;
            try {
              data = JSON.parse(xhr.responseText);
            } catch (parseError) {
              console.error('JSON parse error:', parseError, 'Response was:', xhr.responseText);
              throw new Error('Invalid JSON response from server');
            }
            
            if (data && data.success) {
              // Store user data
              localStorage.setItem('userData', JSON.stringify(data.agent));
              localStorage.setItem('authToken', 'agent-token-' + data.agent.id);
              
              // Show dashboard
              hideAllSections();
              document.getElementById("dashboard").classList.remove("hidden");
              document.getElementById("navDashboard").classList.remove("hidden");
              document.getElementById("navLogout").classList.remove("hidden");
              document.getElementById("navLogin").classList.add("hidden");
              document.getElementById("navSignup").classList.add("hidden");
              errorElement.innerText = "";
              
              // Load dashboard data
              loadDashboardData();
            } else {
              errorElement.innerText = (data && data.message) || "Invalid credentials. Please try again.";
            }
          } else {
            throw new Error(`Server responded with status: ${xhr.status}`);
          }
        } catch (error) {
          console.error('Login error:', error);
          errorElement.innerText = "An error occurred. Please try again later.";
          
          // Fallback to demo login on error
          useDemoLogin();
        }
        
        // Reset button state
        loginBtn.innerHTML = originalBtnText;
        loginBtn.disabled = false;
      };
      
      xhr.onerror = function() {
        console.error('Network error during login');
        errorElement.innerText = "Network error. Please check your connection.";
        
        // Fallback to demo login on network error
        useDemoLogin();
        
        // Reset button state
        loginBtn.innerHTML = originalBtnText;
        loginBtn.disabled = false;
      };
      
      // Function for demo login fallback
      function useDemoLogin() {
        setTimeout(() => {
          const mockAgent = {
            id: 999,
            fullName: 'Demo Agent',
            email: 'demo@example.com',
            agencyName: 'Demo Travel Agency',
            agencyId: 'DEMO123'
          };
          
          // Store mock user data
          localStorage.setItem('userData', JSON.stringify(mockAgent));
          localStorage.setItem('authToken', 'agent-token-999');
          
          // Show dashboard
          hideAllSections();
          document.getElementById("dashboard").classList.remove("hidden");
          document.getElementById("navDashboard").classList.remove("hidden");
          document.getElementById("navLogout").classList.remove("hidden");
          document.getElementById("navLogin").classList.add("hidden");
          document.getElementById("navSignup").classList.add("hidden");
          errorElement.innerText = "";
          
          // Load dashboard data
          loadDashboardData();
        }, 1000);
      }
      
      // Prepare form data and send the request
      const formData = new FormData();
      formData.append('action', 'login');
      formData.append('email', user);
      formData.append('password', pass);
      xhr.send(formData);
    }
    
    // Signup functionality
    function signup() {
      const fullName = document.getElementById("fullName").value;
      const email = document.getElementById("email").value;
      const phone = document.getElementById("phone").value;
      const agencyName = document.getElementById("agencyName").value;
      const agencyId = document.getElementById("agencyId").value;
      const password = document.getElementById("password").value;
      const confirmPassword = document.getElementById("confirmPassword").value;
      const errorElement = document.getElementById("signupError");
      
      // Check if all required fields are filled
      if (!fullName || !email || !phone || !agencyName || !agencyId || !password || !confirmPassword) {
        errorElement.innerText = "Please fill in all required fields.";
        return;
      }
      
      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        errorElement.innerText = "Please enter a valid email address.";
        return;
      }
      
      // Check if passwords match
      if (password !== confirmPassword) {
        errorElement.innerText = "Passwords do not match. Please try again.";
        return;
      }
      
      // Check password strength (at least 8 characters with at least one number and one special character)
      const passwordRegex = /^(?=.*[0-9])(?=.*[!@#$%^&*])(.{8,})$/;
      if (!passwordRegex.test(password)) {
        errorElement.innerText = "Password must be at least 8 characters long and contain at least one number and one special character.";
        return;
      }
      
      // Show loading state
      const btn = document.querySelector("#signupSection .btn");
      const originalText = btn.innerHTML;
      btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating account...';
      btn.disabled = true;
      errorElement.innerText = "";
      
      // Prepare form data for API request
      const formData = new FormData();
      formData.append('action', 'register');
      formData.append('fullName', fullName);
      formData.append('email', email);
      formData.append('phone', phone);
      formData.append('agencyName', agencyName);
      formData.append('agencyId', agencyId);
      formData.append('password', password);
      
      // Make API call to register agent
      fetch(apiUrls.dashboardData, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert(`Account created successfully for ${fullName}! You can now login.`);
          showLogin();
        } else {
          errorElement.innerText = data.message || "An error occurred during registration.";
        }
      })
      .catch(error => {
        console.error('Registration error:', error);
        errorElement.innerText = "An error occurred. Please try again later.";
      })
      .finally(() => {
        btn.innerHTML = originalText;
        btn.disabled = false;
      });
    }
    
    // Load dashboard data when user logs in
    function loadDashboardData() {
      // Get user data from localStorage
      const userData = JSON.parse(localStorage.getItem('userData')) || {};
      
      // Update agent info
      document.getElementById('agentName').textContent = userData.fullName || userData.name || 'Agent Name';
      document.getElementById('agentAgency').textContent = userData.agencyName || 'Agency Name';
      
      // Get agent stats from API
      const agentId = userData.id;
      if (agentId) {
        // Fetch agent statistics
        fetch(`${dbConfig.baseUrl}?action=getAgentStats&agentId=${agentId}`)
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update dashboard statistics
              document.getElementById('activeBookingsCount').textContent = data.stats.activeBookings;
              document.getElementById('totalClientsCount').textContent = data.stats.totalClients;
              document.getElementById('revenueCount').textContent = '₹' + data.stats.revenue;
            } else {
              console.error('Failed to load agent statistics:', data.message);
            }
          })
          .catch(error => {
            console.error('Error loading agent statistics:', error);
          });
        
        // Load recent bookings
        loadRecentBookings();
      } else {
        // Fallback to demo data if no agent ID
        document.getElementById('activeBookingsCount').textContent = Math.floor(Math.random() * 20) + 5;
        document.getElementById('totalClientsCount').textContent = Math.floor(Math.random() * 50) + 10;
        document.getElementById('revenueCount').textContent = '₹' + (Math.floor(Math.random() * 500000) + 100000);
        
        // Load recent bookings
        loadRecentBookings();
      }
    }
  
  // Signup functionality
  function signup() {
    const fullName = document.getElementById("fullName").value;
    const email = document.getElementById("email").value;
    const phone = document.getElementById("phone").value;
    const agencyName = document.getElementById("agencyName").value;
    const agencyId = document.getElementById("agencyId").value;
    const password = document.getElementById("password").value;
    const confirmPassword = document.getElementById("confirmPassword").value;
    const errorElement = document.getElementById("signupError");
    
    // Check if all required fields are filled
    if (!fullName || !email || !phone || !agencyName || !agencyId || !password || !confirmPassword) {
      errorElement.innerText = "All fields are required";
      return;
    }
    
    // Check if passwords match
    if (password !== confirmPassword) {
      errorElement.innerText = "Passwords do not match";
      return;
    }
    
    // Show loading state
    const btn = document.querySelector("#signupSection .btn");
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating account...';
    btn.disabled = true;
    errorElement.innerText = "";
    
    // Prepare form data
    const formData = new FormData();
    formData.append('action', 'register');
    formData.append('fullName', fullName);
    formData.append('email', email);
    formData.append('phone', phone);
    formData.append('agencyName', agencyName);
    formData.append('agencyId', agencyId);
    formData.append('password', password);
    
    // Send registration request
    fetch(dbConfig.baseUrl, {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert(`Account created successfully for ${fullName}! You can now login.`);
        showLogin();
      } else {
        errorElement.innerText = data.message || "An error occurred during registration.";
      }
    })
    .catch(error => {
      console.error('Registration error:', error);
      errorElement.innerText = "An error occurred. Please try again later.";
    })
    .finally(() => {
      btn.innerHTML = originalText;
      btn.disabled = false;
    });
  }
  
  // Load dashboard data when user logs in
  function loadDashboardData() {
    // Get user data from localStorage
    const userData = JSON.parse(localStorage.getItem('userData')) || {};
    
    // Update agent info
    document.getElementById('agentName').textContent = userData.fullName || userData.name || 'Agent Name';
    document.getElementById('agentAgency').textContent = userData.agencyName || 'Agency Name';
    
    // Get agent stats and bookings from the new PHP endpoint
    const agentId = userData.id;
    const isDemo = !agentId || agentId === '999';
    
    // Fetch dashboard data (stats and bookings) in one request
    fetch(`${apiUrls.dashboardData}?action=getDashboardData${isDemo ? '&demo=true' : ''}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          // Update dashboard statistics
          document.getElementById('activeBookingsCount').textContent = data.stats.activeBookings;
          document.getElementById('totalClientsCount').textContent = data.stats.totalClients;
          document.getElementById('revenueCount').textContent = '₹' + data.stats.revenue;
          
          // Update recent bookings
          displayBookings(data.bookings);
        } else {
          console.error('Failed to load dashboard data:', data.message);
          // Show error message to user
          showNotification('error', 'Failed to load dashboard data: ' + data.message);
          
          // Fallback to demo data
          document.getElementById('activeBookingsCount').textContent = Math.floor(Math.random() * 20) + 5;
          document.getElementById('totalClientsCount').textContent = Math.floor(Math.random() * 50) + 10;
          document.getElementById('revenueCount').textContent = '₹' + (Math.floor(Math.random() * 500000) + 100000);
        }
      })
      .catch(error => {
        console.error('Error loading dashboard data:', error);
        // Show error message to user
        showNotification('error', 'Error loading dashboard data. Please try again.');
        
        // Fallback to demo data
        document.getElementById('activeBookingsCount').textContent = Math.floor(Math.random() * 20) + 5;
        document.getElementById('totalClientsCount').textContent = Math.floor(Math.random() * 50) + 10;
        document.getElementById('revenueCount').textContent = '₹' + (Math.floor(Math.random() * 500000) + 100000);
      });
  }
  
  // Display bookings in the UI
  function displayBookings(bookings) {
    const bookingsListDiv = document.getElementById('recentBookingsList');
    
    if (!bookings || bookings.length === 0) {
      bookingsListDiv.innerHTML = '<p class="info-message">No recent bookings found.</p>';
      return;
    }
    
    let html = '';
    
    bookings.forEach(booking => {
      const statusClass = booking.status === 'confirmed' ? 'status-confirmed' : 
                         booking.status === 'pending' ? 'status-pending' : 'status-cancelled';
      
      const statusIcon = booking.status === 'confirmed' ? 'fa-check-circle' : 
                        booking.status === 'pending' ? 'fa-clock' : 'fa-times-circle';
      
      // Use bookingId if available, fallback to id for backward compatibility
      const bookingId = booking.bookingId || booking.id || '';
      
      html += `
        <div class="booking-card" onclick="viewBookingDetails('${bookingId}')">
          <div class="booking-header">
            <h4>${booking.clientName}</h4>
            <span class="status-badge ${statusClass}">
              <i class="fas ${statusIcon}"></i>
              ${booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
            </span>
          </div>
          <div class="booking-details">
            <div class="detail-item">
              <strong>Booking ID</strong>
              <p>${bookingId}</p>
            </div>
            <div class="detail-item">
              <strong>Service</strong>
              <p>${booking.service}</p>
            </div>
            <div class="detail-item">
              <strong>Dates</strong>
              <p>${booking.dates}</p>
            </div>
          </div>
        </div>
      `;
    });
    

      // Show a user-friendly error message
      showNotification('error', 'Error loading booking details. Please try again.');
    });
}
}

// Function to show the modify booking module
function showModifyModule() {
// Get the current booking data from the window variable
const bookingData = window.currentBookingData || {};
const bookingId = window.currentBookingId || 0;

if (!bookingData || !bookingId) {
  alert('Booking data not available. Please try again.');
  return;
}

// Get the booking details section
const detailsSection = document.getElementById('bookingDetails');

// Create the edit form HTML
const editFormHtml = '<h2><i class="fas fa-edit"></i> Modify Booking</h2>' +
  '<div class="edit-form">' +
  '<form id="editBookingForm">' +
  '<input type="hidden" id="editBookingId" value="' + bookingData.bookingId + '">' +
  '<div class="form-group">' +
  '<label for="editClientName">Client Name</label>' +
  '<input type="text" id="editClientName" class="form-control" value="' + bookingData.clientName + '" required>' +
  '</div>' +
  '<div class="form-group">' +
  '<label for="editEmail">Email</label>' +
  '<input type="email" id="editEmail" class="form-control" value="' + bookingData.email + '" required>' +
  '</div>' +
  '<div class="form-group">' +
  '<label for="editStatus">Status</label>' +
  '<select id="editStatus" class="form-control">' +
  '<option value="confirmed" ' + (bookingData.status === 'confirmed' ? 'selected' : '') + '>Confirmed</option>' +
  '<option value="pending" ' + (bookingData.status === 'pending' ? 'selected' : '') + '>Pending</option>' +
  '<option value="cancelled" ' + (bookingData.status === 'cancelled' ? 'selected' : '') + '>Cancelled</option>' +
  '</select>' +
  '</div>' +
  '<div class="form-group">' +
  '<label for="editCheckInDate">Check-in Date</label>' +
  '<input type="date" id="editCheckInDate" class="form-control" value="' + (bookingData.startDate || '') + '">' +
  '</div>' +
  '<div class="form-group">' +
  '<label for="editCheckOutDate">Check-out Date</label>' +
  '<input type="date" id="editCheckOutDate" class="form-control" value="' + (bookingData.endDate || '') + '">' +
  '</div>' +
  '<div class="btn-group">' +
  '<button type="button" class="btn btn-secondary" onclick="saveBookingChanges()"><i class="fas fa-save"></i> Save Changes</button>' +
  '<button type="button" class="btn btn-outline" onclick="cancelEdit()"><i class="fas fa-times"></i> Cancel</button>' +
  '</div>' +
  '</form>' +
  '</div>';

// Update the section with the edit form
detailsSection.innerHTML = editFormHtml;
}

// Function to cancel the edit and go back to booking details
function cancelEdit() {
// Get the current booking ID
const bookingId = window.currentBookingId;
if (bookingId) {
  // Reload the booking details
  viewBookingDetails(bookingId);
} else {
  // If no booking ID, go back to dashboard
  showDashboard();
}
}

// Function to save booking changes
function saveBookingChanges() {
// Get the form values
const bookingId = document.getElementById('editBookingId').value;
        }
      })
      .catch(error => {
        console.error('Error loading booking details:', error);
        detailsSection.innerHTML = `
          <div class="error-container">
            <p class="error-message">Error loading booking details: ${error.message}</p>
            <button class="btn btn-secondary" onclick="showDashboard()">Back to Dashboard</button>
          </div>
        `;
        
        // Show a user-friendly error message
        showNotification('error', 'Error loading booking details. Please try again.');
      });
    
    // For demo agent ID 999, show sample data
    if (userData.id === 999) {
      setTimeout(() => {
        // Create mock booking data based on the booking ID
        const mockBooking = {
          bookingId: bookingId,
          clientName: bookingId == 12345 ? 'Smita Dhungel' : 
                         bookingId == 12346 ? 'Rajesh Sharma' : 'Sarah Johnson',
          email: bookingId == 12345 ? 'smita@gmail.com' : 
                bookingId == 12346 ? 'rajesh@example.com' : 'sarah@example.com',
          service: bookingId == 12345 ? 'Everest Base Camp Trek' : 
                  bookingId == 12346 ? 'Annapurna Circuit' : 'Langtang Valley Trek',
          dates: bookingId == 12345 ? 'May 5 - May 15, 2023' : 
                 bookingId == 12346 ? 'June 10 - June 25, 2023' : 'July 3 - July 10, 2023',
          status: bookingId == 12345 || bookingId == 12347 ? 'confirmed' : 'pending',
          amount: bookingId == 12345 ? 1200 : 
                  bookingId == 12346 ? 950 : 1500
        };
        
        // Format amount with currency symbol
        const formattedAmount = '₹' + mockBooking.amount;
        
        // Display the mock booking details
        detailsSection.innerHTML = `
          <h2><i class="fas fa-calendar-alt"></i> Booking Details</h2>
          <div class="booking-card">
            <h3>${mockBooking.clientName}</h3>
            <div class="booking-details">
              <div class="detail-item">
                <strong>Email</strong>
                <p>${mockBooking.email}</p>
              dates: bookingId == 12345 ? 'May 5 - May 15, 2023' : 
                     bookingId == 12346 ? 'June 10 - June 25, 2023' : 'July 3 - July 10, 2023',
              status: bookingId == 12345 || bookingId == 12347 ? 'confirmed' : 'pending',
              amount: bookingId == 12345 ? 1200 : 
                      bookingId == 12346 ? 950 : 1500
            };
            
            // Format amount with currency symbol
            const formattedAmount = '₹' + mockBooking.amount;
            
            // Display the mock booking details
            detailsSection.innerHTML = '<h2><i class="fas fa-calendar-alt"></i> Booking Details</h2>' +
              '<div class="booking-card">' +
              '<h3>' + mockBooking.clientName + '</h3>'
                + '<div class="booking-details">' +
                  '<div class="detail-item">' +
                  '<strong>Email</strong>' +
                  '<p>' + mockBooking.email + '</p>' +
                  '</div>'
                  + '<div class="detail-item">' +
                  '<strong>Booking ID</strong>' +
                  '<p>' + mockBooking.bookingId + '</p>' +
                  '</div>'
                  + '<div class="detail-item">' +
                  '<strong>Service</strong>' +
                  '<p>' + mockBooking.service + '</p>' +
                  '</div>'
                  + '<div class="detail-item">' +
                  '<strong>Dates</strong>' +
                  '<p>' + mockBooking.dates + '</p>' +
                  '</div>'
                  + '<div class="detail-item">' +
                  '<strong>Amount</strong>' +
                  '<p>' + formattedAmount + '</p>' +
                  '</div>'
              </div>
              <div class="detail-item">
                <strong>Booking ID</strong>
                <p>${mockBooking.bookingId}</p>
              </div>
              <div class="detail-item">
                <strong>Service</strong>
                <p>${mockBooking.service}</p>
              </div>
              <div class="detail-item">
                <strong>Dates</strong>
                <p>${mockBooking.dates}</p>
              </div>
              <div class="detail-item">
                <strong>Amount</strong>
                <p>${formattedAmount}</p>
              </div>
            window.currentBookingData = mockBooking;
          }, 800);
        }
      }
    };
    
    xhr.onerror = function() {
      console.error('Network error loading booking details');
      detailsSection.innerHTML = `
        <h2><i class="fas fa-calendar-alt"></i> Booking Details</h2>
        <div class="error-message">Network error. Please check your connection.</div>
        <button class="btn" onclick="showDashboard()"><i class="fas fa-arrow-left"></i> Back to Dashboard</button>
      `;
    };
    
    xhr.send();
  }
  
  // Function to show the modify booking module
  function showModifyModule() {
    // Get the current booking data from the window variable
    const bookingData = window.currentBookingData || {};
    const bookingId = window.currentBookingId || 0;
    
    if (!bookingData || !bookingId) {
      alert('Booking data not available. Please try again.');
      return;
    }
    
    // Get the booking details section
    const detailsSection = document.getElementById('bookingDetails');
    
    // Create the edit form HTML
    const editFormHtml = `
      <h2><i class="fas fa-edit"></i> Modify Booking</h2>
      <div class="edit-form">
        <form id="editBookingForm">
          <input type="hidden" id="editBookingId" value="${bookingData.bookingId}">
          
          <div class="form-group">
            <label for="editClientName">Client Name</label>
            <input type="text" id="editClientName" class="form-control" value="${bookingData.clientName}" required>
          </div>
          
          <div class="form-group">
            <label for="editEmail">Email</label>
            <input type="email" id="editEmail" class="form-control" value="${bookingData.email}" required>
          </div>
          
          <div class="form-group">
            <label for="editStatus">Status</label>
            <select id="editStatus" class="form-control">
              <option value="confirmed" ${bookingData.status === 'confirmed' ? 'selected' : ''}>Confirmed</option>
              <option value="pending" ${bookingData.status === 'pending' ? 'selected' : ''}>Pending</option>
              <option value="cancelled" ${bookingData.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="editCheckInDate">Check-in Date</label>
            <input type="date" id="editCheckInDate" class="form-control" value="${bookingData.startDate || ''}">
          </div>
          
          <div class="form-group">
            <label for="editCheckOutDate">Check-out Date</label>
            <input type="date" id="editCheckOutDate" class="form-control" value="${bookingData.endDate || ''}">
          </div>
          
          <div class="btn-group">
            <button type="button" class="btn btn-secondary" onclick="saveBookingChanges()"><i class="fas fa-save"></i> Save Changes</button>
            <button type="button" class="btn btn-outline" onclick="cancelEdit()"><i class="fas fa-times"></i> Cancel</button>
          </div>
        </form>
      </div>
    `;
    
    // Update the section with the edit form
    detailsSection.innerHTML = editFormHtml;
  }
  
  // Function to cancel the edit and go back to booking details
  function cancelEdit() {
    // Get the current booking ID
    const bookingId = window.currentBookingId;
    if (bookingId) {
      // Reload the booking details
      viewBookingDetails(bookingId);
    } else {
      // If no booking ID, go back to dashboard
      showDashboard();
    }
  }
  
  // Function to save booking changes
  function saveBookingChanges() {
    // Get the form values
    const bookingId = document.getElementById('editBookingId').value;
    const clientName = document.getElementById('editClientName').value;
    const email = document.getElementById('editEmail').value;
    const status = document.getElementById('editStatus').value;
    const checkInDate = document.getElementById('editCheckInDate').value;
    const checkOutDate = document.getElementById('editCheckOutDate').value;
    
    // Validate required fields
    if (!clientName || !email) {
      alert('Please fill in all required fields');
      return;
    }
    
    // Show loading state
    const detailsSection = document.getElementById('bookingDetails');
    detailsSection.innerHTML = '<div class="loading-container"><p><i class="fas fa-spinner fa-spin"></i> Saving changes...</p></div>';
    
    // Prepare the data for the API
    const formData = new FormData();
    formData.append('action', 'updateBooking');
    formData.append('bookingId', bookingId);
    formData.append('clientName', clientName);
    formData.append('email', email);
    formData.append('status', status);
    
    if (checkInDate) formData.append('checkInDate', checkInDate);
    if (checkOutDate) formData.append('checkOutDate', checkOutDate);
    
    // Get user data to check if this is a demo account
    const userData = JSON.parse(localStorage.getItem('userData')) || {};
    const isDemo = !userData.id || userData.id === '999';
    
    // Send the update request using XMLHttpRequest
    const xhr = new XMLHttpRequest();
    xhr.open('POST', `${apiUrls.dashboardData}${isDemo ? '?demo=true' : ''}`, true);
    
    xhr.onload = function() {
      try {
        // Check if response is empty
        if (!xhr.responseText || xhr.responseText.trim() === '') {
          throw new Error('Empty response from server');
        }
        
        // Parse JSON response
        const data = JSON.parse(xhr.responseText);
        
        if (data.success) {
          // Show success message
          detailsSection.innerHTML = `
            <h2><i class="fas fa-check-circle"></i> Booking Updated</h2>
            <div class="success-message">${data.message || 'Booking has been updated successfully'}</div>
            <div class="btn-group">
              <button class="btn" onclick="viewBookingDetails(${bookingId})"><i class="fas fa-eye"></i> View Booking</button>
              <button class="btn btn-outline" onclick="showDashboard()"><i class="fas fa-arrow-left"></i> Back to Dashboard</button>
            </div>
          `;
          
          // Refresh the dashboard in the background
          loadRecentBookings();
        } else {
          // Show error message
          detailsSection.innerHTML = `
            <h2><i class="fas fa-edit"></i> Update Failed</h2>
            <div class="error-message">Failed to update booking: ${data.message || 'Unknown error'}</div>
            <div class="btn-group">
              <button class="btn" onclick="showModifyModule()"><i class="fas fa-redo"></i> Try Again</button>
              <button class="btn btn-outline" onclick="viewBookingDetails(${bookingId})"><i class="fas fa-times"></i> Cancel</button>
            </div>
          `;
        }
      } catch (error) {
        console.error('Error updating booking:', error);
        detailsSection.innerHTML = `
          <h2><i class="fas fa-edit"></i> Update Failed</h2>
          <div class="error-message">An error occurred while updating the booking</div>
          <div class="btn-group">
            <button class="btn" onclick="showModifyModule()"><i class="fas fa-redo"></i> Try Again</button>
            <button class="btn btn-outline" onclick="viewBookingDetails(${bookingId})"><i class="fas fa-times"></i> Cancel</button>
          </div>
        `;
      }
    };
    
    xhr.onerror = function() {
      console.error('Network error updating booking');
      detailsSection.innerHTML = `
        <h2><i class="fas fa-edit"></i> Update Failed</h2>
        <div class="error-message">Network error. Please check your connection.</div>
        <div class="btn-group">
          <button class="btn" onclick="showModifyModule()"><i class="fas fa-redo"></i> Try Again</button>
          <button class="btn btn-outline" onclick="viewBookingDetails(${bookingId})"><i class="fas fa-times"></i> Cancel</button>
        </div>
      `;
    };
    
    xhr.send(formData);
  }
  
  // Function to show support traveler module
  function showSupportTraveler() {
    const detailsSection = document.getElementById('bookingDetails');
    detailsSection.innerHTML = `
      <h2><i class="fas fa-headset"></i> Assist Traveler</h2>
      <div class="support-module">
        <p>Use the tools below to assist the traveler with their booking:</p>
        
        <div class="support-options">
          <button class="btn" onclick="sendEmailToTraveler()"><i class="fas fa-envelope"></i> Send Email</button>
          <button class="btn" onclick="initiateCall()"><i class="fas fa-phone"></i> Call Traveler</button>
          <button class="btn" onclick="sendSMS()"><i class="fas fa-sms"></i> Send SMS</button>
        </div>
        
        <div class="notes-section">
          <h3>Add Notes</h3>
          <textarea id="travelNotes" placeholder="Add notes about this traveler's needs or requests..."></textarea>
          <button class="btn btn-secondary" onclick="saveNotes()"><i class="fas fa-save"></i> Save Notes</button>
        </div>
      </div>
      
      <div class="btn-group">
        <button class="btn btn-outline" onclick="viewBookingDetails(window.currentBookingId)"><i class="fas fa-arrow-left"></i> Back to Booking</button>
      </div>
    `;
  }
  
  // Function to send email to traveler
  function sendEmailToTraveler() {
    const bookingData = window.currentBookingData;
    if (!bookingData || !bookingData.email) {
      alert('Email address not available');
      return;
    }
    
    // In a real application, this would open an email composition interface
    // For this demo, we'll just show a confirmation
    const supportSection = document.querySelector('.support-module');
    supportSection.innerHTML = `
      <div class="success-message">
        <p><i class="fas fa-check-circle"></i> Email draft prepared for ${bookingData.email}</p>
        <p>Your email client would open here in a real application.</p>
      </div>
      <button class="btn" onclick="showSupportTraveler()"><i class="fas fa-arrow-left"></i> Back to Support Options</button>
    `;
  }
  
  // Function to initiate call to traveler
  function initiateCall() {
    const bookingData = window.currentBookingData;
    if (!bookingData) {
      alert('Booking data not available');
      return;
    }
    
    // In a real application, this would initiate a call
    // For this demo, we'll just show a confirmation
    const supportSection = document.querySelector('.support-module');
    supportSection.innerHTML = `
      <div class="success-message">
        <p><i class="fas fa-phone"></i> Initiating call to traveler</p>
        <p>Your phone system would connect here in a real application.</p>
      </div>
      <button class="btn" onclick="showSupportTraveler()"><i class="fas fa-arrow-left"></i> Back to Support Options</button>
    `;
  }
  
  // Function to send SMS to traveler
  function sendSMS() {
    const bookingData = window.currentBookingData;
    if (!bookingData) {
      alert('Booking data not available');
      return;
    }
    
    // In a real application, this would open an SMS composition interface
    // For this demo, we'll just show a confirmation
    const supportSection = document.querySelector('.support-module');
    supportSection.innerHTML = `
      <div class="success-message">
        <p><i class="fas fa-sms"></i> SMS draft prepared</p>
        <p>Your messaging interface would open here in a real application.</p>
      </div>
      <button class="btn" onclick="showSupportTraveler()"><i class="fas fa-arrow-left"></i> Back to Support Options</button>
    `;
  }
  
  // Function to save traveler notes
  function saveNotes() {
    const notes = document.getElementById('travelNotes').value;
    if (!notes) {
      alert('Please enter some notes before saving');
      return;
    }
    
    // In a real application, this would save the notes to the database
    // For this demo, we'll just show a confirmation
    const notesSection = document.querySelector('.notes-section');
    notesSection.innerHTML = `
      <h3>Notes Saved</h3>
      <div class="success-message">
        <p><i class="fas fa-check-circle"></i> Notes have been saved successfully</p>
      </div>
      <button class="btn" onclick="showSupportTraveler()"><i class="fas fa-redo"></i> Add More Notes</button>
    `;
  }
  
  // Function to show login form
  function showLoginForm() {
    // Hide all sections
    hideAllSections();
    
    // Show login section
    const loginSection = document.getElementById('loginSection');
    if (loginSection) {
      loginSection.classList.remove('hidden');
    }
    
    // Clear any previous form data
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
      loginForm.reset();
    }
    
    // Clear any error messages
    const errorMessage = document.querySelector('.error-message');
    if (errorMessage) {
      errorMessage.textContent = '';
      errorMessage.classList.add('hidden');
    }
  }
  
  // Initialize the dashboard when the page loads
  document.addEventListener('DOMContentLoaded', function() {
    // Check if user is logged in
    const userData = JSON.parse(localStorage.getItem('userData')) || {};
    if (userData.token) {
      // User is logged in, show dashboard
      showDashboard();
    } else {
      // User is not logged in, show login form
      showLoginForm();
    }
  });
  // End of script
  
  // Populate booking details in the booking details section
  function populateBookingDetails(booking) {
    const detailsSection = document.getElementById('bookingDetails');
    
    // Update client name
    const nameElement = detailsSection.querySelector('h3');
    if (nameElement) nameElement.textContent = booking.clientName;
    
    // Update email
    const emailElement = detailsSection.querySelector('.detail-item:nth-child(1) p');
    if (emailElement) emailElement.textContent = booking.email;
    
    const idElement = detailsSection.querySelector('.detail-item:nth-child(2) p');
    if (idElement) idElement.textContent = booking.id || booking.bookingId;
    
    const serviceElement = detailsSection.querySelector('.detail-item:nth-child(3) p');
    if (serviceElement) serviceElement.textContent = booking.service;
    
    const datesElement = detailsSection.querySelector('.detail-item:nth-child(4) p');
    if (datesElement) datesElement.textContent = booking.dates;
    
    // Update status badge
    const statusBadge = detailsSection.querySelector('.status-badge');
    if (statusBadge) {
      statusBadge.className = `status-badge status-${booking.status}`;
      
      const statusIcon = statusBadge.querySelector('i');
      if (statusIcon) {
        statusIcon.className = `fas ${booking.status === 'confirmed' ? 'fa-check-circle' : 
                                   booking.status === 'pending' ? 'fa-clock' : 'fa-times-circle'}`;
      }
      
      const statusText = statusBadge.textContent.trim();
      statusBadge.textContent = '';
      statusBadge.appendChild(statusIcon);
      statusBadge.appendChild(document.createTextNode(' ' + booking.status.charAt(0).toUpperCase() + booking.status.slice(1)));
    }
    
    // Store the current booking data for editing
    window.currentBooking = booking;
  }
  
  // Show edit booking form
  function editBooking() {
    if (!window.currentBooking) {
      alert('No booking data available');
      return;
    }
    
    // Hide booking details and show edit form
    document.querySelector('#bookingDetails .booking-card').classList.add('hidden');
    document.querySelector('#bookingDetails .btn-group').classList.add('hidden');
    document.getElementById('editBookingForm').classList.remove('hidden');
    
    // Populate form with current booking data
    document.getElementById('editClientName').value = window.currentBooking.clientName;
    document.getElementById('editEmail').value = window.currentBooking.email;
    document.getElementById('editStatus').value = window.currentBooking.status;
    document.getElementById('editBookingId').value = window.currentBooking.bookingId;
    
    // Parse dates for the date inputs
    if (window.currentBooking.startDate) {
      document.getElementById('editCheckInDate').value = window.currentBooking.startDate;
    } else {
      // Try to parse from the dates string
      const datesMatch = window.currentBooking.dates.match(/([A-Za-z]+ \d+, \d{4}) - ([A-Za-z]+ \d+, \d{4})/);
      if (datesMatch) {
        const startDate = new Date(datesMatch[1]);
        const endDate = new Date(datesMatch[2]);
        document.getElementById('editCheckInDate').value = startDate.toISOString().split('T')[0];
        document.getElementById('editCheckOutDate').value = endDate.toISOString().split('T')[0];
      }
    }
    
    if (window.currentBooking.endDate) {
      document.getElementById('editCheckOutDate').value = window.currentBooking.endDate;
    }
    
    // Clear any previous messages
    document.getElementById('editMessage').textContent = '';
  }
  
  // Cancel edit and return to booking details view
  function cancelEdit() {
    document.getElementById('editBookingForm').classList.add('hidden');
    document.querySelector('#bookingDetails .booking-card').classList.remove('hidden');
    document.querySelector('#bookingDetails .btn-group').classList.remove('hidden');
  }
  
  // Save booking changes
  function saveBookingChanges() {
    const bookingId = document.getElementById('editBookingId').value;
    const clientName = document.getElementById('editClientName').value;
    const email = document.getElementById('editEmail').value;
    const status = document.getElementById('editStatus').value;
    const checkInDate = document.getElementById('editCheckInDate').value;
    const checkOutDate = document.getElementById('editCheckOutDate').value;
    
    // Validate form
    if (!clientName || !email || !checkInDate || !checkOutDate) {
      document.getElementById('editMessage').textContent = 'Please fill in all required fields';
      document.getElementById('editMessage').className = 'error-message';
      return;
    }
    
    // Get agent ID from local storage
    const userData = JSON.parse(localStorage.getItem('userData')) || {};
    const agentId = userData.id;
    
    if (!agentId) {
      document.getElementById('editMessage').textContent = 'User data not found. Please log in again.';
      document.getElementById('editMessage').className = 'error-message';
      return;
    }
    
    // Show loading state
    const saveBtn = document.querySelector('#editBookingForm .btn-primary');
    const originalBtnText = saveBtn.innerHTML;
    saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    saveBtn.disabled = true;
    document.getElementById('editMessage').textContent = 'Saving changes...';
    document.getElementById('editMessage').className = 'message';
    
    // Prepare form data
    const formData = new FormData();
    formData.append('action', 'updateBooking');
    formData.append('bookingId', bookingId);
    formData.append('clientName', clientName);
    formData.append('email', email);
    formData.append('status', status);
    formData.append('checkInDate', checkInDate);
    formData.append('checkOutDate', checkOutDate);
    formData.append('agentId', agentId);
    
    // Send update request to API
    fetch(dbConfig.baseUrl, {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        document.getElementById('editMessage').textContent = data.message || 'Booking updated successfully';
        document.getElementById('editMessage').className = 'success-message';
        
        // Update the current booking data
        if (data.booking) {
          window.currentBooking = data.booking;
          populateBookingDetails(data.booking);
        } else {
          // If no booking data returned, update the current booking with form values
          window.currentBooking.clientName = clientName;
          window.currentBooking.email = email;
          window.currentBooking.status = status;
          
          // Format dates for display
          const startDate = new Date(checkInDate);
          const endDate = new Date(checkOutDate);
          window.currentBooking.dates = `${startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })} - ${endDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
          
          populateBookingDetails(window.currentBooking);
        }
        
        // Return to booking details view after a short delay
        setTimeout(() => {
          cancelEdit();
        }, 1500);
      } else {
        document.getElementById('editMessage').textContent = data.message || 'Failed to update booking';
        document.getElementById('editMessage').className = 'error-message';
      }
    })
    .catch(error => {
      console.error('Update error:', error);
      document.getElementById('editMessage').textContent = 'An error occurred while updating the booking';
      document.getElementById('editMessage').className = 'error-message';
      
      // For demo purposes, simulate a successful update
      setTimeout(() => {
        document.getElementById('editMessage').textContent = 'Booking updated successfully (Demo)';
        document.getElementById('editMessage').className = 'success-message';
        
        // Update the current booking with form values
        window.currentBooking.clientName = clientName;
        window.currentBooking.email = email;
        window.currentBooking.status = status;
        
        // Format dates for display
        const startDate = new Date(checkInDate);
        const endDate = new Date(checkOutDate);
        window.currentBooking.dates = `${startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })} - ${endDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
        
        populateBookingDetails(window.currentBooking);
        
        // Return to booking details view after a short delay
        setTimeout(() => {
          cancelEdit();
        }, 1500);
      }, 1000);
    })
    .finally(() => {
      saveBtn.innerHTML = originalBtnText;
      saveBtn.disabled = false;
    });
  }
  
  // Function to show booking details section
  function showBookingDetails() {
    hideAllSections();
    const detailsSection = document.getElementById("bookingDetails");
    detailsSection.classList.remove('hidden');
  }
    
  // Search functionality
  function searchBooking() {
    const searchInput = document.getElementById("searchInput").value;
    const resultsDiv = document.getElementById("searchResults");
    const userData = JSON.parse(localStorage.getItem('userData')) || {};
    const agentId = userData.id;
    
    if (!searchInput) {
      resultsDiv.innerHTML = '<p class="error-message">Please enter a search term</p>';
      return;
    }
    
    if (!agentId) {
      resultsDiv.innerHTML = '<p class="error-message">User data not found. Please log in again.</p>';
      return;
    }
    
    // Show loading state
    resultsDiv.innerHTML = '<p><i class="fas fa-spinner fa-spin"></i> Searching bookings...</p>';
    
    // Search bookings via API
    fetch(`${dbConfig.baseUrl}?action=searchBookings&agentId=${agentId}&query=${encodeURIComponent(searchInput)}`)
      .then(response => response.json())
      .then(data => {
        if (data.success && data.bookings && data.bookings.length > 0) {
          displaySearchResults(data.bookings);
        } else {
          resultsDiv.innerHTML = `
            <div class="booking-card">
              <p>No bookings found for "${searchInput}"</p>
              <button class="btn btn-outline" onclick="document.getElementById('searchInput').value = ''; searchBooking()">
                <i class="fas fa-redo"></i> Clear Search
              </button>
            </div>
          `;
        }
      })
      .catch(error => {
        console.error('Search error:', error);
        resultsDiv.innerHTML = '<p class="error-message">An error occurred during search</p>';
        
        // For demo purposes, show mock data if API fails
        setTimeout(() => {
          const searchLower = searchInput.toLowerCase();
          
          if (searchLower.includes("smita") || searchLower.includes("bk12345")) {
            const mockResult = {
              bookingId: 'BK12345',
              clientName: 'Smita Dhungel',
              service: 'Everest Base Camp Trek',
              dates: 'May 5 - May 15, 2023',
              status: 'confirmed',
              email: 'smita@gmail.com'
            };
            
            displaySearchResults([mockResult]);
          } else if (searchLower.includes("rajesh") || searchLower.includes("bk12346")) {
            const mockResult = {
              bookingId: 'BK12346',
              clientName: 'Rajesh Sharma',
              service: 'Annapurna Circuit',
              dates: 'June 10 - June 25, 2023',
              status: 'pending',
              email: 'rajesh@example.com'
            };
            
            displaySearchResults([mockResult]);
          } else {
            resultsDiv.innerHTML = `
              <div class="booking-card">
                <p>No bookings found for "${searchInput}"</p>
                <button class="btn btn-outline" onclick="document.getElementById('searchInput').value = ''; searchBooking()">
                  <i class="fas fa-redo"></i> Clear Search
                </button>
              </div>
            `;
          }
        }, 800);
      });
    }
    
    // Modify booking functions
    function showModifyModule() {
      hideAllSections();
      document.getElementById("modifyModule").classList.remove("hidden");
    }
    
    function saveChanges() {
      const dates = document.getElementById("newDates").value;
      const service = document.getElementById("newService").value;
      const notification = document.getElementById("notification");
      
      if (!dates || !service) {
        notification.innerHTML = '<p class="error-message">Please fill out both fields</p>';
        notification.classList.remove("hidden");
        return;
      }
      
      // Simulate loading
      notification.innerHTML = '<p><i class="fas fa-spinner fa-spin"></i> Updating booking...</p>';
      notification.classList.remove("hidden");
      
      // Simulate API call
      setTimeout(() => {
        notification.innerHTML = `
          <h4><i class="fas fa-check-circle success-message"></i> Booking Updated</h4>
          <p>Traveler has been notified of the changes:</p>
          <ul>
            <li><strong>New Dates:</strong> ${dates}</li>
            <li><strong>New Service:</strong> ${service}</li>
          </ul>
          <div class="btn-group">
            <button class="btn" onclick="showItineraryModule()"><i class="fas fa-map-marked-alt"></i> Suggest Itinerary</button>
            <button class="btn btn-accent" onclick="endSession()"><i class="fas fa-times"></i> End Session</button>
          </div>
        `;
      }, 1000);
    }
    
    // Support functions
    function showSupportTraveler() {
      hideAllSections();
      document.getElementById("supportTraveler").classList.remove("hidden");
    }
    
    function showItineraryModule() {
      hideAllSections();
      document.getElementById("itineraryModule").classList.remove("hidden");
    }
    
    function suggestItinerary() {
      const pref = document.getElementById("preference").value;
      const resultDiv = document.getElementById("itineraryResult");
      
      if (!pref) {
        resultDiv.innerHTML = '<p class="error-message">Please enter traveler preferences</p>';
        return;
      }
      
      // Simulate loading
      resultDiv.innerHTML = '<p><i class="fas fa-spinner fa-spin"></i> Generating recommendations...</p>';
      
      // Simulate API call
      setTimeout(() => {
        const itineraries = {
          "mountains": [
            "Everest Base Camp Trek - 12 Days",
            "Annapurna Circuit - 15 Days",
            "Langtang Valley Trek - 7 Days"
          ],
          "lakes": [
            "Pokhara & Begnas Lake Tour - 5 Days",
            "Rara Lake Trek - 10 Days",
            "Tilicho Lake with Annapurna Circuit - 14 Days"
          ],
          "cultural": [
            "Kathmandu Valley Cultural Tour - 4 Days",
            "Lumbini Buddhist Pilgrimage - 3 Days",
            "Bhaktapur & Patan Heritage Walk - 2 Days"
          ]
        };
        
        let recommendations = [];
        const prefLower = pref.toLowerCase();
        
        if (prefLower.includes("mountain")) {
          recommendations = itineraries.mountains;
        } else if (prefLower.includes("lake")) {
          recommendations = itineraries.lakes;
        } else if (prefLower.includes("cultural") || prefLower.includes("heritage")) {
          recommendations = itineraries.cultural;
        } else {
          // Default recommendations
          recommendations = [
            ...itineraries.mountains.slice(0, 1),
            ...itineraries.lakes.slice(0, 1),
            ...itineraries.cultural.slice(0, 1)
          ];
        }
        
        let html = `
          <div class="itinerary-suggestion">
            <h3><i class="fas fa-lightbulb"></i> Recommended Itineraries</h3>
            <p>Based on the traveler's interest in <strong>${pref}</strong>, we recommend:</p>
            <ul style="margin-top: 0.5rem; margin-left: 1.5rem;">
        `;
        
        recommendations.forEach(item => {
          html += `<li>${item}</li>`;
        });
        
        html += `
            </ul>
            <p style="margin-top: 1rem;"><strong><i class="fas fa-check-circle"></i> Details have been sent to the traveler.</strong></p>
            <button class="btn btn-accent" style="margin-top: 1rem;" onclick="endSession()">
              <i class="fas fa-times"></i> End Session
            </button>
          </div>
        `;
        
        resultDiv.innerHTML = html;
      }, 1200);
    }
    
    function endSession() {
      // Show confirmation dialog
      if (confirm("Are you sure you want to end this support session?")) {
        // Simulate ending session
        const btn = document.querySelector("#supportTraveler .btn-accent");
        if (btn) {
          const originalText = btn.innerHTML;
          btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Ending session...';
          btn.disabled = true;
          
          setTimeout(() => {
            alert("Support session ended successfully.");
            logout();
          }, 800);
        } else {
          alert("Support session ended successfully.");
          logout();
        }
      }
    }
    
    // Display search results
    function displaySearchResults(bookings) {
      const resultsDiv = document.getElementById("searchResults");
      
      if (!bookings || bookings.length === 0) {
        resultsDiv.innerHTML = '<p>No bookings found</p>';
        return;
      }
      
      let html = '<div class="search-results-container">';
      
      bookings.forEach(booking => {
        const statusClass = booking.status === 'confirmed' ? 'status-confirmed' : 
                           booking.status === 'pending' ? 'status-pending' : 'status-cancelled';
        
        const statusIcon = booking.status === 'confirmed' ? 'fa-check-circle' : 
                          booking.status === 'pending' ? 'fa-clock' : 'fa-times-circle';
        
        // Use bookingId if available, fallback to id for backward compatibility
        const bookingId = booking.bookingId || booking.id || '';
        
        html += `
          <div class="booking-card" onclick="viewBookingDetails('${bookingId}')">
            <div class="booking-header">
              <h3>${booking.clientName}</h3>
              <span class="status-badge ${statusClass}">
                <i class="fas ${statusIcon}"></i>
                ${booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}
              </span>
            </div>
            <div class="booking-details">
              <div class="detail-item">
                <strong>Booking ID</strong>
                <p>${bookingId}</p>
              </div>
              <div class="detail-item">
                <strong>Service</strong>
                <p>${booking.service}</p>
              </div>
              <div class="detail-item">
                <strong>Dates</strong>
                <p>${booking.dates}</p>
              </div>
            </div>
          </div>
        `;
      });
      
      html += '</div>';
      resultsDiv.innerHTML = html;
    }
    
    // Show new booking form
    function showNewBookingForm() {
      alert('New booking form functionality will be implemented soon!');
    }
    
    // Show client list
    function showClientList() {
      alert('Client list functionality will be implemented soon!');
    }
    
    // Show reports
    function showReports() {
      alert('Reports functionality will be implemented soon!');
    }
    
    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      // Check if user is logged in
      const authToken = localStorage.getItem('authToken');
      if (authToken) {
        // Auto-login if token exists
        hideAllSections();
        document.getElementById("dashboard").classList.remove("hidden");
        document.getElementById("navDashboard").classList.remove("hidden");
        document.getElementById("navLogout").classList.remove("hidden");
        document.getElementById("navLogin").classList.add("hidden");
        document.getElementById("navSignup").classList.add("hidden");
        
        // Load dashboard data
        loadDashboardData();
      }
    });
  </script>
</body>
</html>